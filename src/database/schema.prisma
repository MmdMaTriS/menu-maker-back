generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id               String         @id @default(uuid())
  first_name       String         @db.VarChar(50)
  last_name        String         @db.VarChar(100)
  mobile           String         @unique
  password         String
  email            String?
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  store_subscribes Store[]
  status           UserStatusEnum @default(ACTIVE)
  suspend_list     SuspendList[]
}

model Ventors {
  id           String           @id @default(uuid())
  created_at   DateTime         @default(now())
  updated_at   DateTime         @updatedAt
  first_name   String           @db.VarChar(50)
  last_name    String           @db.VarChar(100)
  mobile       String
  password     String
  email        String?
  national_id  String?
  status       VentorStatusEnum @default(DISABLED)
  Store        Store[]
  suspend_list SuspendList[]
}

model Admins {
  id         String        @id @default(uuid())
  role       AdminRoleEnum
  first_name String        @db.VarChar(50)
  last_name  String        @db.VarChar(100)
  mobile     String        @unique
  password   String
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
}

model Store {
  id              Int             @id @default(autoincrement())
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  open_at         DateTime?
  close_at        DateTime?
  name            String
  address         String?
  zip_code        String?
  phone           String[]
  latitude        Float?
  longitude       Float?
  ventor          Ventors         @relation(fields: [ventor_id], references: [id])
  ventor_id       String
  items           ShopItem[]
  status          StoreStatusEnum @default(PENDING)
  imagesId        Int?
  store_type      String?
  subscribe_users Users[]
}

model ShopItem {
  id               Int                @id @default(autoincrement())
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  category_id      Int
  category         ShopItemCategory   @relation(fields: [category_id], references: [id])
  name             String
  description      String?
  preparation_time Float?
  price            Float?
  price_format     String
  Store            Store?             @relation(fields: [storeId], references: [id])
  storeId          Int?
  images           ShopItemImages[]
  remaining        Int?
  status           ShopItemStatusEnum
  discount         Int?
  toppings         ShopItemTopping[]
}

model ShopItemTopping {
  id           Int                @id @default(autoincrement())
  created_at   DateTime           @default(now())
  updated_at   DateTime           @updatedAt
  shop_item    ShopItem           @relation(fields: [shop_item_id], references: [id])
  shop_item_id Int
  name         String
  description  String
  price        Float
  price_format String
  discount     Int?
  remaining    Int?
  status       ShopItemStatusEnum
  images       ShopItemImages[]
}

model ShopItemCategory {
  id         Int        @id @default(autoincrement())
  name       String
  items      ShopItem[]
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

model ShopItemImages {
  id                   Int              @id @default(autoincrement())
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt
  mime_type            String
  name                 String           @default("")
  description          String           @default("")
  image_key            String
  thumbnail_path       String
  medium_path          String
  orginal_path         String
  uploaded_by_id       String
  shop_item            ShopItem?        @relation(fields: [shop_item_id], references: [id])
  shop_item_id         Int?
  shop_item_topping    ShopItemTopping? @relation(fields: [shop_item_topping_id], references: [id])
  shop_item_topping_id Int?
}

model LoginDevices {
  id           Int      @id @default(autoincrement())
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  expired_at   DateTime
  access_token String
  ip_address   String
  user_agent   String
  user_id      String?
}

model SuspendList {
  id                Int       @id @default(autoincrement())
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  reason            String
  unsuspend_at      DateTime?
  user_suspend      Users?    @relation(fields: [user_suspend_id], references: [id])
  user_suspend_id   String?
  ventor_suspend    Ventors?  @relation(fields: [ventor_suspend_id], references: [id])
  ventor_suspend_id String?
}

model OTPList {
  id          Int      @id @default(autoincrement())
  created_at  DateTime @default(now())
  code        String
  mobile      String
  ip_address  String
  user_agent  String
  description String?
}

enum VentorStatusEnum {
  ACTIVE
  DISABLED
  SUSPEND
}

enum UserStatusEnum {
  ACTIVE
  DISABLED
  SUSPEND
}

enum StoreStatusEnum {
  PENDING
  ACTIVE
  DISABLED
  SUSPEND
}

enum ShopItemStatusEnum {
  PENDING
  ACTIVE
  DISABLED
  ENDED
}

enum AdminRoleEnum {
  MANAGER
  ADMIN
  SUPPORT
}
